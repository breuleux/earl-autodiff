
require: "ad.js" as _ad
ad = _ad{{=}}

provide = ad
provide:
   autodiff

wrap-body{@, body} =
   let {=> ad} = @deps
   {add, sub, mul, div, exp, let Math
    eq, lt, gt, leq, geq} = @mark{
      `+`, `-`, `*`, `/`, `**`, `Math`
      `==`, `<`, `>`, `<=`, `>=`
   }
   ```
   let ad = ^ad
   let ^Math = ad.maths
   let raw-symbol{^add}{x, y} = ad.add{x, y}
   let raw-symbol{^sub}{x, y} = ad.sub{x, y}
   let raw-symbol{^mul}{x, y} = ad.mul{x, y}
   let raw-symbol{^div}{x, y} = ad.div{x, y}
   let raw-symbol{^exp}{x, y} = ad.maths.pow{x, y}
   let raw-symbol{^eq}{x, y} = ad.eq{x, y}
   let raw-symbol{^lt}{x, y} = ad.lt{x, y}
   let raw-symbol{^gt}{x, y} = ad.gt{x, y}
   let raw-symbol{^leq}{x, y} = ad.leq{x, y}
   let raw-symbol{^geq}{x, y} = ad.geq{x, y}
   [null, ^body]
   ```

macro{ad} autodiff{ctx, x} =
   @multimacro with {
      project{match expr} =
         `_lambda{^args, ^pre, ^body, ^post, ^gen}` ->
            `_lambda{^args, ^pre, ^wrap-body{@, body}, ^post, ^gen}`
         `^args -> ^body` ->
            `^args -> ^wrap-body{@, body}`
         else ->
            throw E.syntax.invalid-autodiff{"invalid", node = expr}
   }


Object.define-property{Function.prototype, .derivative-f} with {
   get{} = ad.derivative-f{this}
}

